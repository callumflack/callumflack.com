/** 
 * easy media queries
 * @include bp(tablet) { SCSS here };
 * http://css-tricks.com/media-queries-sass-3-2-and-codekit/
 * http://css-tricks.com/resolution-specific-stylesheets/
 * http://css-tricks.com/css-media-queries/
 */

@mixin bp($point) {
	@if $point == desk {
		@media (max-width: 1620px) { @content; }
	}
	@if $point == air {
		@media (min-width: 1300px) and (max-width: 1619px) { @content; } //default max-width: 1600 // Air 11in 1366 by 768, 13in 1440 by 900
	}
	@if $point == tablet {
		@media (max-width: 1299px) { @content; }
	}
	@if $point == palm {
		@media (max-width: 768px) { @content; }
	}
	@else if $point == osx {
		@media (max-width: 320px) { @content; } //set this to 320 upon pushing live
	}
}

/**
 * bourbon pixels to ems/rems converter
 */

@function rem($pxval, $base: 16) {
    @return ($pxval / $base) * 1rem;
}

// SCUT PIXELS TO EMS
// http://davidtheclark.github.io/scut/#pixels-to-ems

// Depends on `scut-strip-unit`.

@function scut-rem (
  $pixels,
  $base: 16
) {

  // $base could be in em or px (no unit = px).
  // Adjust accordingly to create a $divisor that
  // serves as context for $pixels.
  $multiplier: if(unit($base) == em, 16, 1);
  $divisor: scut-strip-unit($base) * $multiplier;

  @return ($pixels / $divisor) * 1rem;

}


/**
 * Inuit: create a fully formed type style (sizing and vertical rhythm)
 * by passing in a single value, e.g.: @include font-size(10px);
 * With unit stripping: http://jsfiddle.net/redclover/mkYtY/
 * Also: http://designbyjoel.com/blog/2013-02-28-sass-rems/
 */

@mixin font-size($font-size, $line-height:false){
	font-size:$font-size;
    font-size:($font-size / $base-font-size)*1rem;
    @if $line-height == true{
        line-height:ceil($font-size / $base-line-height) * ($base-line-height / $font-size);
    }
}



